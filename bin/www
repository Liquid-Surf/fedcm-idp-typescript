#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('fedcm:server')
var https = require('https')
var fs = require('fs')
var http = require('http')

// Check if the HEROKU_APP_NAME environment variable is set
var isHeroku = !!process.env.HEROKU_APP_NAME

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443')
app.set('port', port)

/**
 * Create server based on the environment (Heroku or not).
 */

let server

if (isHeroku) {
  // For Heroku, create an HTTP server
  server = http.createServer(app)
} else {
  // For non-Heroku environments, create an HTTPS server with SNI context
  var domain_1 = process.env.DOMAIN_1 || 'idp-a-test.de'
  var domain_2 = process.env.DOMAIN_2 || 'idp-b-test.de'

  const credentials_site1 = {
    key: fs.readFileSync('./certs/idp-a-test/privkey.pem', 'utf8'),
    cert: fs.readFileSync('./certs/idp-a-test/fullchain.pem', 'utf8')
  }

  const credentials_site2 = {
    key: fs.readFileSync('./certs/idp-b-test/privkey.pem', 'utf8'),
    cert: fs.readFileSync('./certs/idp-b-test/fullchain.pem', 'utf8')
  }

  server = https.createServer(app)

  server.addContext(domain_1, credentials_site1)
  server.addContext(domain_2, credentials_site2)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
